from typing import List

def is_on_curve(_bytes: bytes) -> bool: ...

class Pubkey:
    LENGTH: int
    def __init__(self, pubkey_bytes: bytes) -> None: ...
    @staticmethod
    def new_unique() -> "Pubkey": ...
    @staticmethod
    def default() -> "Pubkey": ...
    @staticmethod
    def from_str(s: str) -> "Pubkey": ...
    @staticmethod
    def create_with_seed(
        from_public_key: "Pubkey", seed: str, program_id: "Pubkey"
    ) -> "Pubkey": ...
    @staticmethod
    def create_program_address(seeds: List[bytes]) -> "Pubkey": ...
    @staticmethod
    def find_program_address(seeds: List[bytes], program_id: "Pubkey") -> "Pubkey": ...
    def is_on_curve(self) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __bytes__(self) -> bytes: ...
    def __richcmp__(self, other: "Pubkey", op: int) -> bool: ...

class Keypair:
    def __init__(self) -> None: ...
    @staticmethod
    def from_bytes(raw_bytes: bytes) -> "Keypair": ...
    @staticmethod
    def from_seed(seed: bytes) -> "Keypair": ...
    @staticmethod
    def from_seed_phrase_and_passphrase(
        seed_phrase: str, passphrase: str
    ) -> "Keypair": ...
    def secret(self) -> bytes: ...
    def pubkey(self) -> Pubkey: ...

def decode_length(raw_bytes: bytes) -> tuple[int, int]: ...
def encode_length(value: int) -> list[int]: ...
